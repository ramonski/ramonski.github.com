<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: extjs | Ramonskis Blog]]></title>
  <link href="http://ramonski.github.com/blog/categories/extjs/atom.xml" rel="self"/>
  <link href="http://ramonski.github.com/"/>
  <updated>2013-10-20T13:13:49+02:00</updated>
  <id>http://ramonski.github.com/</id>
  <author>
    <name><![CDATA[ramonski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing Sencha Cmd]]></title>
    <link href="http://ramonski.github.com/blog/2012/12/03/sencha-command/"/>
    <updated>2012-12-03T11:49:00+01:00</updated>
    <id>http://ramonski.github.com/blog/2012/12/03/sencha-command</id>
    <content type="html"><![CDATA[<p>Sencha Cmd is a command line tool code generator for ExtJS.
It lets you create starter projects, deployment builds and a lot of more things
with ease.</p>

<p><strong>Download</strong>:
<a href="http://www.sencha.com/products/sencha-cmd/download">http://www.sencha.com/products/sencha-cmd/download</a></p>

<p><strong>Documentation</strong>:
<a href="http://docs.sencha.com/ext-js/4-1/#!/guide/command">http://docs.sencha.com/ext-js/4-1/#!/guide/command</a></p>

<!-- more -->


<h2>Prerequisits</h2>

<p>You need to have at least
<a href="http://www.sencha.com/products/extjs/download/ext-js-4.1.1/1683">ExtJS 4.1.1a</a>
downloaded.</p>

<p>On my machine, I downloaded and unpacked it into
<code>~/develop/js/Sencha/ext-4.1.1a</code></p>

<p>You also need to have <code>ruby</code> prepared with <code>compass</code> and <code>sass</code>.</p>

<p>```
$ which ruby
/Users/rbartl/.rvm/rubies/ruby-1.9.3-p194/bin/ruby</p>

<p>$ ruby -v
ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin11.3.0]</p>

<p>$ gem list</p>

<p><strong><em> LOCAL GEMS </em></strong></p>

<p>compass (0.12.2)
sass (3.2.3)
[...]
```</p>

<p>Take a look into <a href="https://rvm.io">rvm</a>  which lets you manage local <code>ruby</code>
installations with sandboxed gemsets.</p>

<p><a href="https://rvm.io/rvm/install">rvm installation</a></p>

<p>... in short:</p>

<p>``` bash
$ cd $HOME
$ \curl -L https://get.rvm.io | bash -s stable --ruby
$ source .rvm/bin/rvm</p>

<p>$ rvm list</p>

<p>rvm rubies</p>

<p>=* ruby-1.9.3-p194 [ x86_64 ]</p>

<h1>=> - current</h1>

<h1>=* - current &amp;&amp; default</h1>

<h1>* - default</h1>

<p>```</p>

<h2>The sencha command</h2>

<p>After you installed Sencha Cmd, you should have the <code>sencha</code> command available
in your terminal:</p>

<p><code>bash
$ which sencha
/Users/rbartl/bin/sencha
</code>
There are a bunch of arguments available, type <code>sencha help</code> to view them.</p>

<h2>Bootstrapping a new application</h2>

<p>Now we can use the <code>sencha generate</code> command to generate a new MVC like ExtJS App.
<a href="http://extjs-4.1.1.dev/docs/index.html#!/guide/application_architecture">MVC Application Architecture</a></p>

<p><code>bash
$ mkdir /tmp/account_manager
$ cd /tmp/account_manager
$ sencha -s ~/develop/js/Sencha/ext-4.1.1a generate app AM .
</code></p>

<p>This command copies over the ExtJS library for us and generates a basic
filesystem structure with example content.</p>

<p>``` bash
$ tree -L 2
.
├── app
│   ├── app.js
│   ├── controller
│   ├── model
│   ├── store
│   └── view
├── bootstrap.js
├── build.xml
├── ext
│   ├── bootstrap.js
│   ├── build.xml
│   ├── builds
│   ├── cmd
│   ├── ext-all-debug-w-comments.js
│   ├── ext-all-debug.js
│   ├── ext-all-dev.js
│   ├── ext-all.js
│   ├── ext-debug-w-comments.js
│   ├── ext-debug.js
│   ├── ext-dev.js
│   ├── ext-neptune-debug-w-comments.js
│   ├── ext-neptune-debug.js
│   ├── ext-neptune.js
│   ├── ext.js
│   ├── license.txt
│   ├── locale
│   ├── resources
│   └── src
├── index.html
└── resources</p>

<pre><code>├── css
├── sass
└── theme
</code></pre>

<p>```</p>

<h2>Serve the new App</h2>

<p>A very simple way to serve your app is with this one-liner:</p>

<p><code>bash
python -c "from SimpleHTTPServer import test;test()"
</code></p>

<p>Now open up a webbrowser of your choice and go to</p>

<p><a href="http://localhost:8000">http://localhost:8000</a></p>

<p>You should see an empty <a href="http://extjs-4.1.1.dev/docs/index.html#!/api/Ext.layout.container.Border">border layout</a>
with a west and center area. The center area should contain a single tab titled "Center Tab 1".</p>

<p>Congratulations, you just build a sencha app with one command:)</p>

<h2>Adding a model to the Application</h2>

<p>As shown in the <a href="http://extjs-4.1.1.dev/docs/index.html#!/guide/application_architecture">MVC Application Architecture</a>
tutorial, we're going to add a user model with the following command:</p>

<p><code>bash
$ sencha generate model User id:int,name,email
</code></p>

<p>This command adds a <code>Model.js</code> to your <code>app/model</code> directory.
The content should look like this:</p>

<p>``` javascript
Ext.define('AM.model.User', {</p>

<pre><code>extend: 'Ext.data.Model',

fields: [
    { name: 'id', type: 'int' },
    { name: 'name', type: 'auto' },
    { name: 'email', type: 'auto' }
]
</code></pre>

<p>});
```</p>

<h2>Adding a view to the Application</h2>

<p>We would like to have a view for all the Users of our Application</p>

<p><code>bash
$ sencha generate view user.List
</code></p>

<p>This will add a view stub called <code>List.js</code> in <code>app/view/user</code>.</p>

<p>The output is really basic:</p>

<p>``` javascript
Ext.define("AM.view.user.List", {</p>

<pre><code>extend: 'Ext.Component',
html: 'Hello, World!!'
</code></pre>

<p>});
```</p>

<p>We have to change it to be useful:</p>

<p>```
Ext.define('AM.view.user.List' ,{</p>

<pre><code>extend: 'Ext.grid.Panel',
alias: 'widget.userlist',
title: 'All Users',

store: 'Users',

initComponent: function() {
    this.columns = [
        {header: 'Name',  dataIndex: 'name',  flex: 1},
        {header: 'Email', dataIndex: 'email', flex: 1}
    ];
    this.callParent(arguments);
}
</code></pre>

<p>});
```</p>

<p>As you can see, we reference a store here called <code>Users</code>.
There is no sencha command to create a store, so we're going to add it manually.</p>

<h2>Adding a store to the Application</h2>

<p>Add a file <code>Users.js</code> to your <code>app/store</code> directory.
The code should look like this:</p>

<p>``` javascript
Ext.define('AM.store.Users', {</p>

<pre><code>extend: 'Ext.data.Store',
model: 'AM.model.User',
autoLoad: true,

proxy: {
    type: 'ajax',
    url: '/data/users.json',
    reader: {
        type: 'json',
        root: 'users',
        successProperty: 'success'
    }
}
</code></pre>

<p>});
<code>``
Note the url for the data. it should be located at</code>/data/users.json`.</p>

<p>Create the direcotry <code>data</code> in your application root folder and add the file
<code>users.json</code> with the following contents:</p>

<p>``` json
{</p>

<pre><code>"success": true,
"users": [
    {"id": 1, "name": 'Ed',    "email": "ed@sencha.com"},
    {"id": 2, "name": 'Tommy', "email": "tommy@sencha.com"}
]
</code></pre>

<p>}
```</p>

<h2>Putting everything together</h2>

<p>What do we have so far:</p>

<ul>
<li>A model, which is capable to hold a single user</li>
<li>A store, which knows how to fetch the data from the server and how to store
the data internally as instances of our user model</li>
<li>A grid view, which knows the users store to display a list of users</li>
<li>Fake data in <code>data/users.json</code></li>
</ul>


<p>Now we need to get it somehow on the screen.</p>

<p>First we have to modify the <code>app.js</code> a little bit, so that it knows our store.
It should look like this:</p>

<p>``` javascript
Ext.application({</p>

<pre><code>models: ["User"],
stores: ["Users"],
controllers: ["Main"],
views: ["user.List","Main"],
name: 'AM',

autoCreateViewport: true
</code></pre>

<p>});
```</p>

<p>As we gave our view an <code>alias</code> property of <code>widget.userlist</code>, we can simply use
the part after the dot directly as an <code>xtype</code> in our viewport:</p>

<p>``` javascript
Ext.define('AM.view.Viewport', {</p>

<pre><code>renderTo: Ext.getBody(),
extend: 'Ext.container.Viewport',
requires:[
    'Ext.tab.Panel',
    'Ext.layout.container.Border'
],

layout: {
    type: 'border'
},

items: [{
    region: 'west',
    xtype: 'panel',
    title: 'west',
    width: 150
},{
    region: 'center',
    xtype: 'tabpanel',
    items:[{
        xtype: 'userlist'
    }]
}]
</code></pre>

<p>});
```</p>

<p>After reloading, we should see two user entries in our grid.</p>

<h2>Building a deployment package</h2>

<p>Next step is to build an deployment package for our app.
Open up the developer tools console of Google Chrome.</p>

<p>Reload the application with the <code>Network</code> Tab opened.
At the bottom of all the requests, there should be a line which shows something like this:</p>

<p><code>plain
217 requests  ❘  3.90MB transferred  ❘  1.32s (onload: 1.32s, DOMContentLoaded: 270ms)
</code></p>

<p>Stop the local Python web server and type in the follwing commands</p>

<p><code>bash
$ sencha app build
$ cd build/AM/production
$ ln -s ../../../data .
$ python -c "from SimpleHTTPServer import test;test()"
</code></p>

<p>Reload the application with the <code>Network</code> Tab opened.
At the bottom of all the requests, there should be a line which shows something like this:</p>

<p><code>plain
8 requests  ❘  1.04MB transferred  ❘  601ms (onload: 373ms, DOMContentLoaded: 373ms)
</code></p>

<p>With the deployment version, we reduced the requests from 217 to 8 and the size
is almost 4 times less than before.</p>
]]></content>
  </entry>
  
</feed>
